На данный момент на сервере создаются потоки при подключении каждого пользователя.
Создаются и запускаются через Thread.
Создание происходит в момент подключения, закрывается поток после отключения клиента.
Думаю, что такой подход вполне себя оправдывает, т.к. созданный поток существует продолжительное время — все время,
пока клиент подключен. Создание нового потока не отнимает так много времени и влияет только на момент соединения.
Если управлять потоками через ExecutorService, мы получим экономию времени на соединение,
но потребуется больше памяти для работы сервера в моменты простоя.
Если взять Cached – что будем делать после простоя?
Если взять Single – чат будет один на один.
Если взять Fixed – наверное это лучший вариант из ExecutorService для нашего случая.
Но здесь мы вынуждены будем следить за предельным количеством клиентов.
Ведь каждый клиент — это один поток. Но, зато не будет ситуации с перегрузом системы,
когда подключений слишком много. Может быть даже так лучше,
если при этом мы будем регулярно корректировать предельное количество потоков в зависимости от роста популярности сервиса.
shutdown() нужен будет только когда сервер останавливается, а у нас такой функции не предусмотрено.
В обычном режиме задачи будут появляться с каждый новым подключением.

Реализую FixedThreadPool. Хотя без особого энтузиазма.